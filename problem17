#include <iostream>
#include <vector>
#include <queue>

using namespace std;

// Definition for a binary tree node.
struct TreeNode {
    int val;
    TreeNode *left;
    TreeNode *right;
    TreeNode() : val(0), left(nullptr), right(nullptr) {}
    TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
    TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
};

class Solution {
public:
    TreeNode* replaceValueInTree(TreeNode* root) {
        if (!root) return nullptr;

        queue<pair<TreeNode*, TreeNode*>> q; // (node, parent)
        q.push({root, nullptr});

        while (!q.empty()) {
            int levelSize = q.size();
            vector<pair<TreeNode*, TreeNode*>> level;  // Store nodes at the current level with their parents
            int totalSum = 0;
            
            // Collect all nodes in the current level and calculate the total sum of values
            for (int i = 0; i < levelSize; ++i) {
                auto [node, parent] = q.front();
                q.pop();
                level.push_back({node, parent});
                totalSum += node->val;
                
                // Add children to the queue for the next level
                if (node->left) q.push({node->left, node});
                if (node->right) q.push({node->right, node});
            }
            
            // Update each node's value with the sum of its cousins' values
            for (auto &[node, parent] : level) {
                int siblingSum = 0;
                
                // Calculate the sum of sibling nodes (nodes with the same parent)
                for (auto &[sibling, siblingParent] : level) {
                    if (siblingParent == parent) {
                        siblingSum += sibling->val;
                    }
                }
                
                // Cousin sum = total sum - sibling sum
                node->val = totalSum - siblingSum;
            }
        }

        return root;
    }
};

// Helper function to print the tree in level-order (for testing purposes)
void printTreeLevelOrder(TreeNode* root) {
    if (!root) return;

    queue<TreeNode*> q;
    q.push(root);

    while (!q.empty()) {
        int levelSize = q.size();
        for (int i = 0; i < levelSize; ++i) {
            TreeNode* node = q.front();
            q.pop();
            if (node) {
                cout << node->val << " ";
                q.push(node->left);
                q.push(node->right);
            } else {
                cout << "null ";
            }
        }
        cout << endl;
    }
}

// Example usage
int main() {
    // Constructing the binary tree: [5, 4, 9, 1, 10, null, 7]
    TreeNode* root = new TreeNode(5);
    root->left = new TreeNode(4);
    root->right = new TreeNode(9);
    root->left->left = new TreeNode(1);
    root->left->right = new TreeNode(10);
    root->right->right = new TreeNode(7);

    Solution solution;
    TreeNode* modifiedRoot = solution.replaceValueInTree(root);

    // Output the modified tree
    printTreeLevelOrder(modifiedRoot);
    
    return 0;
}
