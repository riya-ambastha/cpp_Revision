#include <iostream>

 
struct ListNode {
    int val;
    ListNode* next;
    ListNode() : val(0), next(nullptr) {}
    ListNode(int x) : val(x), next(nullptr) {}
    ListNode(int x, ListNode* next) : val(x), next(next) {}
};

class Solution {
public:
    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
       
        ListNode* dummyHead = new ListNode(0);
        ListNode* current = dummyHead;
        int carry = 0;

      
        while (l1 != nullptr || l2 != nullptr || carry != 0) {
            int sum = carry;
            
         
            if (l1 != nullptr) {
                sum += l1->val;
                l1 = l1->next;
            }
 
            if (l2 != nullptr) {
                sum += l2->val;
                l2 = l2->next;
            }

         
            carry = sum / 10;
            int digit = sum % 10;
 
            current->next = new ListNode(digit);
            current = current->next;
        }

       
        return dummyHead->next;
    }
};

 
ListNode* createList(const std::vector<int>& nums) {
    ListNode* dummyHead = new ListNode();
    ListNode* current = dummyHead;
    for (int num : nums) {
        current->next = new ListNode(num);
        current = current->next;
    }
    return dummyHead->next;
}
 
void printList(ListNode* node) {
    while (node != nullptr) {
        std::cout << node->val;
        if (node->next != nullptr) std::cout << " -> ";
        node = node->next;
    }
    std::cout << std::endl;
}

int main() {
    // Example 1: l1 = [2,4,3], l2 = [5,6,4]
    ListNode* l1 = createList({2, 4, 3});
    ListNode* l2 = createList({5, 6, 4});

    Solution sol;
    ListNode* result = sol.addTwoNumbers(l1, l2);

    std::cout << "Output 1: ";
    printList(result);   
 
    l1 = createList({0});
    l2 = createList({0});
    result = sol.addTwoNumbers(l1, l2);

    std::cout << "Output 2: ";
    printList(result);   

   
    l1 = createList({9, 9, 9, 9, 9, 9, 9});
    l2 = createList({9, 9, 9, 9});
    result = sol.addTwoNumbers(l1, l2);

    std::cout << "Output 3: ";
    printList(result);   

    return 0;
}
